##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := omit_source_location

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS :=

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

###### Place OS-specific definitions here ######

ifeq ($(TARGET_OS),android)
    TEST_ROOTS += debug_jit debug_probe
    TOOL_ROOTS += debugtest
endif

ifeq ($(TARGET_OS),linux)
    TEST_ROOTS += debug_dwarf4_jit debug_jit debug_dwarf4_probe debug_probe
    TOOL_ROOTS += debugtest
endif

###### Handle exceptions here ######

ifeq ($(TARGET_OS),linux)
    DWARF4_NOT_SUPPORTED := $(shell $(TOOLS_ROOT)/Utils/testGccVersion $(CXXPATH) 4.5)
    ifeq ($(DWARF4_NOT_SUPPORTED),1)
        TEST_ROOTS := $(filter-out debug_dwarf4_jit debug_dwarf4_probe, $(TEST_ROOTS))
    endif
endif

# Debug information and probe mode are not supported on Mic.
ifeq ($(TARGET),mic)
    TEST_ROOTS := $(filter-out debug_jit debug_probe, $(TEST_ROOTS))
endif

# Our WRL compiler does not support dwarf4.
osrel := $(shell uname -r)
ifeq ($(findstring WR,$(osrel)),WR)
    TEST_ROOTS := $(filter-out debug_dwarf4_jit debug_dwarf4_probe, $(TEST_ROOTS))
endif

###### Define the sanity subset ######

# This defines the list of tests that should run in sanity. It should include all the tests listed in
# TEST_TOOL_ROOTS and TEST_ROOTS excluding only unstable tests.
SANITY_SUBSET := $(TEST_TOOL_ROOTS) $(TEST_ROOTS)


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test

debug_jit.test: $(OBJDIR)debugtest$(PINTOOL_SUFFIX) $(HELLO_APP)
	$(PIN) -t $(OBJDIR)debugtest$(PINTOOL_SUFFIX) \
	  -- $(HELLO_APP) > $(OBJDIR)debug_jit_test.out 2>&1
	$(QGREP) "passed" $(OBJDIR)debug_jit_test.out
	$(RM) $(OBJDIR)debug_jit_test.out

debug_probe.test: $(OBJDIR)debugtest$(PINTOOL_SUFFIX) $(HELLO_APP)
	$(PIN) -probe -t $(OBJDIR)debugtest$(PINTOOL_SUFFIX) \
	  -- $(HELLO_APP) > $(OBJDIR)debug_probe_test.out 2>&1
	$(QGREP) "passed" $(OBJDIR)debug_probe_test.out
	$(RM) $(OBJDIR)debug_probe_test.out

debug_dwarf4_jit.test: $(OBJDIR)debugtest$(PINTOOL_SUFFIX)  $(HELLO_APP_DWARF4)
	$(PIN) -t $(OBJDIR)debugtest$(PINTOOL_SUFFIX) \
	  -- $(HELLO_APP_DWARF4) > $(OBJDIR)debug_dwarf4_jit_test.out 2>&1
	$(QGREP) "passed" $(OBJDIR)debug_dwarf4_jit_test.out
	$(RM) $(OBJDIR)debug_dwarf4_jit_test.out

debug_dwarf4_probe.test: $(OBJDIR)debugtest$(PINTOOL_SUFFIX) $(HELLO_APP_DWARF4)
	$(PIN) -probe -t $(OBJDIR)debugtest$(PINTOOL_SUFFIX) \
	  --  $(HELLO_APP_DWARF4) > $(OBJDIR)debug_dwarf4_probe_test.out 2>&1
	$(QGREP) "passed" $(OBJDIR)debug_dwarf4_probe_test.out
	$(RM) $(OBJDIR)debug_dwarf4_probe_test.out

omit_source_location.test: $(OBJDIR)omit_source_location$(PINTOOL_SUFFIX) $(HELLO_APP)
	$(PIN) -t $(OBJDIR)omit_source_location$(PINTOOL_SUFFIX) -e 0 \
	  --  $(HELLO_APP) > $(OBJDIR)omit_source_location.out 2>&1
	! ( $(PIN) -t $(OBJDIR)omit_source_location$(PINTOOL_SUFFIX) -e 1 \
	  --  $(HELLO_APP) > $(OBJDIR)omit_source_location.out 2>&1 )
	! ( $(QGREP) omit_source_location.cpp $(OBJDIR)omit_source_location.out )
	$(QGREP) "<Unknown source location>" $(OBJDIR)omit_source_location.out
	! ( $(PIN) -t $(OBJDIR)omit_source_location$(PINTOOL_SUFFIX) -e 2 \
	  --  $(HELLO_APP) > $(OBJDIR)omit_source_location.out 2>&1 )
	! ( $(QGREP) omit_source_location.cpp $(OBJDIR)omit_source_location.out )
	$(QGREP) "<Unknown source location>" $(OBJDIR)omit_source_location.out
	$(RM) $(OBJDIR)omit_source_location.out


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

###### Special tools' build rules ######

ifneq ($(TARGET_OS),android)
    VERSION_SCRIPT_PATTERN := -Wl,--version-script%
endif
ifneq ($(TARGET_OS),linux)
    VERSION_SCRIPT_PATTERN := -Wl,--version-script%
endif

###### Special objects' build rules ######

ifeq ($(OS_TYPE),win)
    OMIT_SOURCE_LOCATION := /DOMIT_SOURCE_LOCATION
else
    OMIT_SOURCE_LOCATION := -DOMIT_SOURCE_LOCATION
endif

$(OBJDIR)omit_source_location$(OBJ_SUFFIX): omit_source_location.cpp
	$(CXX) $(OMIT_SOURCE_LOCATION) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<
