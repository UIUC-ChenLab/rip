##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS :=

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS :=

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

###### Place OS-specific definitions here ######

# Android
ifeq ($(TARGET_OS),android)
    ifeq ($(TARGET),intel64)
        TEST_ROOTS += rwm_pushpopcall_riprelative1 rwm_pushpopcall_riprelative2
        TOOL_ROOTS += rewritememop1
        APP_ROOTS += pushpopcall_riprelative
    endif
endif

# Linux
ifeq ($(TARGET_OS),linux)
    ifeq ($(TARGET),intel64)
        TEST_ROOTS += rwm_pushpopcall_riprelative1 rwm_pushpopcall_riprelative2
        TOOL_ROOTS += rewritememop1
        APP_ROOTS += pushpopcall_riprelative
    endif
    ifeq ($(TARGET),mic)
        TEST_ROOTS += rwm_pushpopcall_riprelative1 rwm_pushpopcall_riprelative2
        TOOL_ROOTS += rewritememop1
        APP_ROOTS += pushpopcall_riprelative
    endif
endif

###### Define the sanity subset ######

# This defines the list of tests that should run in sanity. It should include all the tests listed in
# TEST_TOOL_ROOTS and TEST_ROOTS excluding only unstable tests.
SANITY_SUBSET := $(TEST_TOOL_ROOTS) $(TEST_ROOTS)


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test

rwm_pushpopcall_riprelative1.test: $(OBJDIR)rewritememop1$(PINTOOL_SUFFIX) $(OBJDIR)pushpopcall_riprelative$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)rewritememop1$(PINTOOL_SUFFIX) -1 -o $(OBJDIR)rwm_pushpopcall_riprelative1_tool.out \
	  -- $(OBJDIR)pushpopcall_riprelative$(EXE_SUFFIX) > $(OBJDIR)rwm_pushpopcall_riprelative1.out 1>&1
	$(RM) $(OBJDIR)rwm_pushpopcall_riprelative1_tool.out $(OBJDIR)rwm_pushpopcall_riprelative1.out

rwm_pushpopcall_riprelative2.test: $(OBJDIR)rewritememop1$(PINTOOL_SUFFIX) $(OBJDIR)pushpopcall_riprelative$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)rewritememop1$(PINTOOL_SUFFIX) -2 -o $(OBJDIR)rwm_pushpopcall_riprelative2_tool.out \
	  -- $(OBJDIR)pushpopcall_riprelative$(EXE_SUFFIX) > $(OBJDIR)rwm_pushpopcall_riprelative2.out 2>&1
	$(RM) $(OBJDIR)rwm_pushpopcall_riprelative2_tool.out $(OBJDIR)rwm_pushpopcall_riprelative2.out


##############################################################
#
# Build rules
#
##############################################################

###### Special applications' build rules ######

$(OBJDIR)pushpopcall_riprelative$(EXE_SUFFIX): pushpopcall_riprelative$(ASM_SUFFIX)
	$(ASMBLR) $(ASM_FLAGS) $(NO_STDLIBS) $(COMP_EXE)$@ $<
