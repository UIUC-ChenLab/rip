# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_param_BaseCPU', [dirname(__file__)])
        except ImportError:
            import _param_BaseCPU
            return _param_BaseCPU
        if fp is not None:
            try:
                _mod = imp.load_module('_param_BaseCPU', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _param_BaseCPU = swig_import_helper()
    del swig_import_helper
else:
    import _param_BaseCPU
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import m5.internal.param_X86TLB
import m5.internal.param_X86PagetableWalker
import m5.internal.param_System
import m5.internal.enum_MemoryMode
import m5.internal.AddrRange_vector
import m5.internal.AbstractMemory_vector
import m5.internal.param_AbstractMemory
import m5.internal.param_MemObject
import m5.internal.param_ClockedObject
import m5.internal.param_ClockDomain
import m5.internal.param_SimObject
import m5.internal.drain
import m5.internal.serialize
import m5.internal.param_BaseTLB
import m5.internal.param_X86LocalApic
import m5.internal.param_BasicPioDevice
import m5.internal.param_PioDevice
import m5.internal.X86ISA_vector
import m5.internal.param_X86ISA
import m5.internal.Counter_vector
import m5.internal.param_InstTracer
import m5.internal.Process_vector
import m5.internal.param_Process
class BaseCPU(m5.internal.param_MemObject.MemObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def switchOut(self):
        return _param_BaseCPU.BaseCPU_switchOut(self)

    def takeOverFrom(self, cpu):
        return _param_BaseCPU.BaseCPU_takeOverFrom(self, cpu)

    def switchedOut(self):
        return _param_BaseCPU.BaseCPU_switchedOut(self)

    def flushTLBs(self):
        return _param_BaseCPU.BaseCPU_flushTLBs(self)

    def totalInsts(self):
        return _param_BaseCPU.BaseCPU_totalInsts(self)

    def scheduleInstStop(self, tid, insts, cause):
        return _param_BaseCPU.BaseCPU_scheduleInstStop(self, tid, insts, cause)

    def scheduleLoadStop(self, tid, loads, cause):
        return _param_BaseCPU.BaseCPU_scheduleLoadStop(self, tid, loads, cause)
BaseCPU_swigregister = _param_BaseCPU.BaseCPU_swigregister
BaseCPU_swigregister(BaseCPU)

class BaseCPUParams(m5.internal.param_MemObject.MemObjectParams):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    checker = _swig_property(_param_BaseCPU.BaseCPUParams_checker_get, _param_BaseCPU.BaseCPUParams_checker_set)
    cpu_id = _swig_property(_param_BaseCPU.BaseCPUParams_cpu_id_get, _param_BaseCPU.BaseCPUParams_cpu_id_set)
    do_checkpoint_insts = _swig_property(_param_BaseCPU.BaseCPUParams_do_checkpoint_insts_get, _param_BaseCPU.BaseCPUParams_do_checkpoint_insts_set)
    do_quiesce = _swig_property(_param_BaseCPU.BaseCPUParams_do_quiesce_get, _param_BaseCPU.BaseCPUParams_do_quiesce_set)
    do_statistics_insts = _swig_property(_param_BaseCPU.BaseCPUParams_do_statistics_insts_get, _param_BaseCPU.BaseCPUParams_do_statistics_insts_set)
    dtb = _swig_property(_param_BaseCPU.BaseCPUParams_dtb_get, _param_BaseCPU.BaseCPUParams_dtb_set)
    function_trace = _swig_property(_param_BaseCPU.BaseCPUParams_function_trace_get, _param_BaseCPU.BaseCPUParams_function_trace_set)
    function_trace_start = _swig_property(_param_BaseCPU.BaseCPUParams_function_trace_start_get, _param_BaseCPU.BaseCPUParams_function_trace_start_set)
    interrupts = _swig_property(_param_BaseCPU.BaseCPUParams_interrupts_get, _param_BaseCPU.BaseCPUParams_interrupts_set)
    isa = _swig_property(_param_BaseCPU.BaseCPUParams_isa_get, _param_BaseCPU.BaseCPUParams_isa_set)
    itb = _swig_property(_param_BaseCPU.BaseCPUParams_itb_get, _param_BaseCPU.BaseCPUParams_itb_set)
    max_insts_all_threads = _swig_property(_param_BaseCPU.BaseCPUParams_max_insts_all_threads_get, _param_BaseCPU.BaseCPUParams_max_insts_all_threads_set)
    max_insts_any_thread = _swig_property(_param_BaseCPU.BaseCPUParams_max_insts_any_thread_get, _param_BaseCPU.BaseCPUParams_max_insts_any_thread_set)
    max_loads_all_threads = _swig_property(_param_BaseCPU.BaseCPUParams_max_loads_all_threads_get, _param_BaseCPU.BaseCPUParams_max_loads_all_threads_set)
    max_loads_any_thread = _swig_property(_param_BaseCPU.BaseCPUParams_max_loads_any_thread_get, _param_BaseCPU.BaseCPUParams_max_loads_any_thread_set)
    numThreads = _swig_property(_param_BaseCPU.BaseCPUParams_numThreads_get, _param_BaseCPU.BaseCPUParams_numThreads_set)
    profile = _swig_property(_param_BaseCPU.BaseCPUParams_profile_get, _param_BaseCPU.BaseCPUParams_profile_set)
    progress_interval = _swig_property(_param_BaseCPU.BaseCPUParams_progress_interval_get, _param_BaseCPU.BaseCPUParams_progress_interval_set)
    simpoint_start_insts = _swig_property(_param_BaseCPU.BaseCPUParams_simpoint_start_insts_get, _param_BaseCPU.BaseCPUParams_simpoint_start_insts_set)
    socket_id = _swig_property(_param_BaseCPU.BaseCPUParams_socket_id_get, _param_BaseCPU.BaseCPUParams_socket_id_set)
    switched_out = _swig_property(_param_BaseCPU.BaseCPUParams_switched_out_get, _param_BaseCPU.BaseCPUParams_switched_out_set)
    system = _swig_property(_param_BaseCPU.BaseCPUParams_system_get, _param_BaseCPU.BaseCPUParams_system_set)
    tracer = _swig_property(_param_BaseCPU.BaseCPUParams_tracer_get, _param_BaseCPU.BaseCPUParams_tracer_set)
    workload = _swig_property(_param_BaseCPU.BaseCPUParams_workload_get, _param_BaseCPU.BaseCPUParams_workload_set)
    port_icache_port_connection_count = _swig_property(_param_BaseCPU.BaseCPUParams_port_icache_port_connection_count_get, _param_BaseCPU.BaseCPUParams_port_icache_port_connection_count_set)
    port_dcache_port_connection_count = _swig_property(_param_BaseCPU.BaseCPUParams_port_dcache_port_connection_count_get, _param_BaseCPU.BaseCPUParams_port_dcache_port_connection_count_set)

    def __init__(self):
        this = _param_BaseCPU.new_BaseCPUParams()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _param_BaseCPU.delete_BaseCPUParams
    __del__ = lambda self: None
BaseCPUParams_swigregister = _param_BaseCPU.BaseCPUParams_swigregister
BaseCPUParams_swigregister(BaseCPUParams)



