# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_param_MinorCPU', [dirname(__file__)])
        except ImportError:
            import _param_MinorCPU
            return _param_MinorCPU
        if fp is not None:
            try:
                _mod = imp.load_module('_param_MinorCPU', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _param_MinorCPU = swig_import_helper()
    del swig_import_helper
else:
    import _param_MinorCPU
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import m5.internal.param_BranchPredictor
import m5.internal.param_SimObject
import m5.internal.drain
import m5.internal.serialize
import m5.internal.param_MinorFUPool
import m5.internal.MinorFU_vector
import m5.internal.param_MinorFU
import m5.internal.Unsigned_vector
import m5.internal.param_MinorOpClassSet
import m5.internal.MinorOpClass_vector
import m5.internal.param_MinorOpClass
import m5.internal.enum_OpClass
import m5.internal.MinorFUTiming_vector
import m5.internal.param_MinorFUTiming
import m5.internal.param_TimingExpr
import m5.internal.Cycles_vector
import m5.internal.param_BaseCPU
import m5.internal.param_ArmStage2MMU
import m5.internal.param_ArmTLB
import m5.internal.param_ArmTableWalker
import m5.internal.param_System
import m5.internal.enum_MemoryMode
import m5.internal.AddrRange_vector
import m5.internal.AbstractMemory_vector
import m5.internal.param_AbstractMemory
import m5.internal.param_MemObject
import m5.internal.param_ClockedObject
import m5.internal.param_ClockDomain
import m5.internal.param_ArmInterrupts
import m5.internal.ArmISA_vector
import m5.internal.param_ArmISA
import m5.internal.param_ArmPMU
import m5.internal.param_Platform
import m5.internal.param_IntrControl
import m5.internal.Counter_vector
import m5.internal.param_InstTracer
import m5.internal.Process_vector
import m5.internal.param_Process
class MinorCPU(m5.internal.param_BaseCPU.BaseCPU):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
MinorCPU_swigregister = _param_MinorCPU.MinorCPU_swigregister
MinorCPU_swigregister(MinorCPU)

class MinorCPUParams(m5.internal.param_BaseCPU.BaseCPUParams):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def create(self):
        return _param_MinorCPU.MinorCPUParams_create(self)
    branchPred = _swig_property(_param_MinorCPU.MinorCPUParams_branchPred_get, _param_MinorCPU.MinorCPUParams_branchPred_set)
    decodeCycleInput = _swig_property(_param_MinorCPU.MinorCPUParams_decodeCycleInput_get, _param_MinorCPU.MinorCPUParams_decodeCycleInput_set)
    decodeInputBufferSize = _swig_property(_param_MinorCPU.MinorCPUParams_decodeInputBufferSize_get, _param_MinorCPU.MinorCPUParams_decodeInputBufferSize_set)
    decodeInputWidth = _swig_property(_param_MinorCPU.MinorCPUParams_decodeInputWidth_get, _param_MinorCPU.MinorCPUParams_decodeInputWidth_set)
    decodeToExecuteForwardDelay = _swig_property(_param_MinorCPU.MinorCPUParams_decodeToExecuteForwardDelay_get, _param_MinorCPU.MinorCPUParams_decodeToExecuteForwardDelay_set)
    enableIdling = _swig_property(_param_MinorCPU.MinorCPUParams_enableIdling_get, _param_MinorCPU.MinorCPUParams_enableIdling_set)
    executeAllowEarlyMemoryIssue = _swig_property(_param_MinorCPU.MinorCPUParams_executeAllowEarlyMemoryIssue_get, _param_MinorCPU.MinorCPUParams_executeAllowEarlyMemoryIssue_set)
    executeBranchDelay = _swig_property(_param_MinorCPU.MinorCPUParams_executeBranchDelay_get, _param_MinorCPU.MinorCPUParams_executeBranchDelay_set)
    executeCommitLimit = _swig_property(_param_MinorCPU.MinorCPUParams_executeCommitLimit_get, _param_MinorCPU.MinorCPUParams_executeCommitLimit_set)
    executeCycleInput = _swig_property(_param_MinorCPU.MinorCPUParams_executeCycleInput_get, _param_MinorCPU.MinorCPUParams_executeCycleInput_set)
    executeFuncUnits = _swig_property(_param_MinorCPU.MinorCPUParams_executeFuncUnits_get, _param_MinorCPU.MinorCPUParams_executeFuncUnits_set)
    executeInputBufferSize = _swig_property(_param_MinorCPU.MinorCPUParams_executeInputBufferSize_get, _param_MinorCPU.MinorCPUParams_executeInputBufferSize_set)
    executeInputWidth = _swig_property(_param_MinorCPU.MinorCPUParams_executeInputWidth_get, _param_MinorCPU.MinorCPUParams_executeInputWidth_set)
    executeIssueLimit = _swig_property(_param_MinorCPU.MinorCPUParams_executeIssueLimit_get, _param_MinorCPU.MinorCPUParams_executeIssueLimit_set)
    executeLSQMaxStoreBufferStoresPerCycle = _swig_property(_param_MinorCPU.MinorCPUParams_executeLSQMaxStoreBufferStoresPerCycle_get, _param_MinorCPU.MinorCPUParams_executeLSQMaxStoreBufferStoresPerCycle_set)
    executeLSQRequestsQueueSize = _swig_property(_param_MinorCPU.MinorCPUParams_executeLSQRequestsQueueSize_get, _param_MinorCPU.MinorCPUParams_executeLSQRequestsQueueSize_set)
    executeLSQStoreBufferSize = _swig_property(_param_MinorCPU.MinorCPUParams_executeLSQStoreBufferSize_get, _param_MinorCPU.MinorCPUParams_executeLSQStoreBufferSize_set)
    executeLSQTransfersQueueSize = _swig_property(_param_MinorCPU.MinorCPUParams_executeLSQTransfersQueueSize_get, _param_MinorCPU.MinorCPUParams_executeLSQTransfersQueueSize_set)
    executeMaxAccessesInMemory = _swig_property(_param_MinorCPU.MinorCPUParams_executeMaxAccessesInMemory_get, _param_MinorCPU.MinorCPUParams_executeMaxAccessesInMemory_set)
    executeMemoryCommitLimit = _swig_property(_param_MinorCPU.MinorCPUParams_executeMemoryCommitLimit_get, _param_MinorCPU.MinorCPUParams_executeMemoryCommitLimit_set)
    executeMemoryIssueLimit = _swig_property(_param_MinorCPU.MinorCPUParams_executeMemoryIssueLimit_get, _param_MinorCPU.MinorCPUParams_executeMemoryIssueLimit_set)
    executeMemoryWidth = _swig_property(_param_MinorCPU.MinorCPUParams_executeMemoryWidth_get, _param_MinorCPU.MinorCPUParams_executeMemoryWidth_set)
    executeSetTraceTimeOnCommit = _swig_property(_param_MinorCPU.MinorCPUParams_executeSetTraceTimeOnCommit_get, _param_MinorCPU.MinorCPUParams_executeSetTraceTimeOnCommit_set)
    executeSetTraceTimeOnIssue = _swig_property(_param_MinorCPU.MinorCPUParams_executeSetTraceTimeOnIssue_get, _param_MinorCPU.MinorCPUParams_executeSetTraceTimeOnIssue_set)
    fetch1FetchLimit = _swig_property(_param_MinorCPU.MinorCPUParams_fetch1FetchLimit_get, _param_MinorCPU.MinorCPUParams_fetch1FetchLimit_set)
    fetch1LineSnapWidth = _swig_property(_param_MinorCPU.MinorCPUParams_fetch1LineSnapWidth_get, _param_MinorCPU.MinorCPUParams_fetch1LineSnapWidth_set)
    fetch1LineWidth = _swig_property(_param_MinorCPU.MinorCPUParams_fetch1LineWidth_get, _param_MinorCPU.MinorCPUParams_fetch1LineWidth_set)
    fetch1ToFetch2BackwardDelay = _swig_property(_param_MinorCPU.MinorCPUParams_fetch1ToFetch2BackwardDelay_get, _param_MinorCPU.MinorCPUParams_fetch1ToFetch2BackwardDelay_set)
    fetch1ToFetch2ForwardDelay = _swig_property(_param_MinorCPU.MinorCPUParams_fetch1ToFetch2ForwardDelay_get, _param_MinorCPU.MinorCPUParams_fetch1ToFetch2ForwardDelay_set)
    fetch2CycleInput = _swig_property(_param_MinorCPU.MinorCPUParams_fetch2CycleInput_get, _param_MinorCPU.MinorCPUParams_fetch2CycleInput_set)
    fetch2InputBufferSize = _swig_property(_param_MinorCPU.MinorCPUParams_fetch2InputBufferSize_get, _param_MinorCPU.MinorCPUParams_fetch2InputBufferSize_set)
    fetch2ToDecodeForwardDelay = _swig_property(_param_MinorCPU.MinorCPUParams_fetch2ToDecodeForwardDelay_get, _param_MinorCPU.MinorCPUParams_fetch2ToDecodeForwardDelay_set)

    def __init__(self):
        this = _param_MinorCPU.new_MinorCPUParams()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _param_MinorCPU.delete_MinorCPUParams
    __del__ = lambda self: None
MinorCPUParams_swigregister = _param_MinorCPU.MinorCPUParams_swigregister
MinorCPUParams_swigregister(MinorCPUParams)



