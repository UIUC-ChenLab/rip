package generate_roi_structure;

my @profiled_instruction_counts = (10751, 36722186, 73433621, 110145056, 146856491, 183567926, 220279361, 256990796, 293702231, 330413666, 367125101, 403836536, 440547971, 477259406, 513970841, 550682276, 587393711, 624105146, 660816581, 697528016, 734239451, 770950886, 807662321, 844373756, 881085191, 917796626, 954508061, 991219496, 1027930931, 1064642366, 1101353801, 1138065236, 1174776671, 1211488106, 1248199541, 1284910976, 1321622411, 1358333846, 1395045281, 1431756716, 1468468151, 1505179586, 1541891021, 1578602456, 1615313891, 1652025326, 1688736761, 1725448196, 1762159631, 1798871066, 1835582501, 1872293936, 1909005371, 1945716806, 1982428241, 2019139676, 2055851111, 2092562546, 2129273981, 2165985416, 2202696851, 2239408286, 2276119721, 2312831156, 2349542591, 2386254026, 2422965461, 2459676896, 2496388331, 2533099766, 2569811201, 2606522636, 2643234071, 2679945506, 2716656941, 2753368376, 2790079811, 2826791246, 2863502681, 2900214116, 2936925551, 2973636986, 3010348421, 3047059856, 3083771291, 3120482726, 3157194161, 3193905596, 3230617031, 3267328466, 3304039901, 3340751336, 3377462771, 3414174206, 3450885641, 3487597076, 3524308511, 3561019946, 3597731381, 3634442816, 3671154251, 3707865686, 3744577121, 3781288556, 3817999991, 3854711426, 3891422861, 3928134296, 3964845731, 4001557166, 4038268601, 4074980036, 4111691471, 4148402906, 4185114341, 4221825776, 4258537211, 4295248646, 4331960081, 4368671516, 4405382951, 4442094386, 4478805821, 4515517256, 4552228691, 4588940126, 4625651561, 4662362996, 4699074431, 4735785866, 4772497301, 4809208736, 4845920171, 4882631606, 4919343041, 4956054476, 4992765911, 5029477346, 5066188781, 5102900216, 5139611651, 5176323086, 5213034521, 5249745956, 5286457391, 5323168826, 5359880261, 5396591696, 5433303131, 5470014566, 5506726001, 5543437436, 5580148871, 5616860306, 5653571741, 5690283176, 5726994611, 5763706046, 5800417481, 5837128916, 5873840351, 5910551786, 5947263221, 5983974656, 6020686091, 6057397526, 6094108961, 6130820396, 6167531831, 6204243266, 6240954701, 6277666136, 6314377571, 6351089006, 6387800441, 6424511876, 6461223311, 6497934746, 6534646181, 6571357616, 6608069051, 6644780486, 6681491921, 6718203356, 6754914791, 6791626226, 6828337661, 6865049096, 6901760531, 6938471966, 6975183401, 7011894836, 7048606271, 7085317706, 7122029141, 7158740576, 7195452011, 7232163446, 7268874881, 7305586316, 7342297751, 7379009186, 7415720621, 7452432056, 7489143491, 7525854926, 7562566361, 7599277796, 7635989231, 7672700666, 7709412101, 7746123536, 7782834971, 7819546406, 7856257841, 7892969276, 7929680711, 7966392146, 8003103581, 8039815016, 8076526451, 8113237886, 8149949321, 8186660756, 8223372191, 8260083626, 8296795061, 8333506496, 8370217931, 8406929366, 8443640801, 8480352236, 8517063671, 8553775106, 8590486541, 8627197976, 8663909411, 8700620846, 8737332281, 8774043716, 8810755151, 8847466586, 8884178021, 8920889456, 8957600891, 8994312326, 9031023761, 9067735196, 9104446631, 9141158066, 9177869501, 9214580936, 9251292371, 9288003806, 9324715241, 9361426676, 9398138111, 9434849546, 9471560981, 9508272416, 9544983851, 9581695286, 9618406721, 9655118156, 9691829591, 9728541026, 9765252461, 9801963896, 9838675331, 9875386766, 9912098201, 9948809636, 9985521071, 10022232506, 10058943941, 10095655376, 10132366811, 10169078246, 10205789681, 10242501116, 10279212551, 10315923986, 10352635421, 10389346856, 10426058291, 10462769726, 10499481161, 10536192596, 10572904031, 10609615466, 10646326901, 10683038336, 10719749771, 10756461206, 10793172641, 10829884076, 10866595511, 10903306946, 10940018381, 10976729816, 11013441251, 11050152686, 11086864121, 11123575556, 11160286991, 11196998426, 11233709861, 11270421296, 11307132731, 11343844166, 11380555601, 11417267036, 11453978471, 11490689906, 11527401341, 11564112776, 11600824211, 11637535646, 11674247081, 11710958516, 11747669951, 11784381386, 11821092821, 11857804256, 11894515691, 11931227126, 11967938561, 12004649996, 12041361431, 12078072866, 12114784301, 12151495736, 12188207171, 12224918606, 12261630041, 12298341476, 12335052911, 12371764346, 12408475781, 12445187216, 12481898651, 12518610086, 12555321521, 12592032956, 12628744391, 12665455826, 12702167261, 12738878696, 12775590131, 12812301566, 12849013001, 12885724436, 12922435871, 12959147306, 12995858741, 13032570176, 13069281611, 13105993046, 13142704481, 13179415916, 13216127351, 13252838786, 13289550221, 13326261656, 13362973091, 13399684526, 13436395961, 13473107396, 13509818831, 13546530266, 13583241701, 13619953136, 13656664571, 13693376006, 13730087441, 13766798876, 13803510311, 13840221746, 13876933181, 13913644616, 13950356051, 13987067486, 14023778921, 14060490356, 14097201791, 14133913226, 14170624661, 14207336096, 14244047531, 14280758966, 14317470401, 14354181836, 14390893271, 14427604706, 14464316141, 14501027576, 14537739011, 14574450446, 14611161881, 14647873316, 14684584751, 14721296186, 14758007621, 14794719056, 14831430491, 14868141926, 14904853361, 14941564796, 14978276231, 15014987666, 15051699101, 15088410536, 15125121971, 15161833406, 15198544841, 15235256276, 15271967711, 15308679146, 15345390581, 15382102016, 15418813451, 15455524886, 15492236321, 15528947756, 15565659191, 15602370626, 15639082061, 15675793496, 15712504931, 15749216366, 15785927801, 15822639236, 15859350671, 15896062106, 15932773541, 15969484976, 16006196411, 16042907846, 16079619281, 16116330716, 16153042151, 16189753586, 16226465021, 16263176456, 16299887891, 16336599326, 16373310761, 16410022196, 16446733631, 16483445066, 16520156501, 16556867936, 16593579371, 16630290806, 16667002241, 16703713676, 16740425111, 16777136546, 16813847981, 16850559416, 16887270851, 16923982286, 16960693721, 16997405156, 17034116591, 17070828026, 17107539461, 17144250896, 17180962331, 17217673766, 17254385201, 17291096636, 17327808071, 17364519506, 17401230941, 17437942376, 17474653811, 17511365246, 17548076681, 17584788116, 17621499551, 17658210986, 17694922421, 17731633856, 17768345291, 17805056726, 17841768161, 17878479596, 17915191031, 17951902466, 17988613901, 18025325336, 18062036771, 18098748206, 18135459641, 18172171076, 18208882511, 18245593946, 18282305381, 18319016816, 18355728251, 18392439686, 18429151121, 18465862556, 18502573991, 18539285426, 18575996861, 18612708296, 18649419731, 18686131166, 18722842601, 18759554036, 18796265471, 18832976906, 18869688341, 18906399776, 18943111211, 18979822646, 19016534081, 19053245516, 19089956951, 19126668386, 19163379821, 19200091256, 19236802691, 19273514126, 19310225561, 19346936996, 19383648431, 19420359866, 19457071301, 19493782736, 19530494171, 19567205606, 19603917041, 19640628476, 19677339911, 19714051346, 19750762781, 19787474216, 19824185651, 19860897086, 19897608521, 19934319956, 19971031391, 20007742826, 20044454261, 20081165696, 20117877131, 20154588566, 20191300001, 20228011436, 20264722871, 20301434306, 20338145741, 20374857176, 20411568611, 20448280046, 20484991481, 20521702916, 20558414351, 20595125786, 20631837221, 20668548656, 20705260091, 20741971526, 20778682961, 20815394396, 20852105831, 20888817266, 20925528701, 20962240136, 20998951571, 21035663006, 21072374441, 21109085876, 21145797311, 21182508746, 21219220181, 21255931616, 21292643051, 21329354486, 21366065921, 21402777356, 21439488791, 21476200226, 21512911661, 21549623096, 21586334531, 21623045966, 21659757401, 21696468836, 21733180271, 21769891706, 21806603141, 21843314576, 21880026011, 21916737446, 21953448881, 21990160316, 22026871751, 22063583186, 22100294621, 22137006056, 22173717491, 22210428926, 22247140361, 22283851796, 22320563231, 22357274666, 22393986101, 22430697536, 22467408971, 22504120406, 22540831841, 22577543276, 22614254711, 22650966146, 22687677581, 22724389016, 22761100451, 22797811886, 22834523321, 22871234756, 22907946191, 22944657626, 22981369061, 23018080496, 23054791931, 23091503366, 23128214801, 23164926236, 23201637671, 23238349106, 23275060541, 23311771976, 23348483411, 23385194846, 23421906281, 23458617716, 23495329151, 23532040586, 23568752021, 23605463456, 23642174891, 23678886326, 23715597761, 23752309196, 23789020631, 23825732066, 23862443501, 23899154936, 23935866371, 23972577806, 24009289241, 24046000676, 24082712111, 24119423546, 24156134981, 24192846416, 24229557851, 24266269286, 24302980721, 24339692156, 24376403591, 24413115026, 24449826461, 24486537896, 24523249331, 24559960766, 24596672201, 24633383636, 24670095071, 24706806506, 24743517941, 24780229376, 24816940811, 24853652246, 24890363681, 24927075116, 24963786551, 25000497986, 25037209421, 25073920856, 25110632291, 25147343726, 25184055161, 25220766596, 25257478031, 25294189466, 25330900901, 25367612336, 25404323771, 25441035206, 25477746641, 25514458076, 25551169511, 25587880946, 25624592381, 25661303816, 25698015251, 25734726686, 25771438121, 25808149556, 25844860991, 25881572426, 25918283861, 25954995296, 25991706731, 26028418166, 26065129601, 26101841036, 26138552471, 26175263906, 26211975341, 26248686776, 26285398211, 26322109646, 26358821081, 26395532516, 26432243951, 26468955386, 26505666821, 26542378256, 26579089691, 26615801126, 26652512561, 26689223996, 26725935431, 26762646866, 26799358301, 26836069736, 26872781171, 26909492606, 26946204041, 26982915476, 27019626911, 27056338346, 27093049781, 27129761216, 27166472651, 27203184086, 27239895521, 27276606956, 27313318391, 27350029826, 27386741261, 27423452696, 27460164131, 27496875566, 27533587001, 27570298436, 27607009871, 27643721306, 27680432741, 27717144176, 27753855611, 27790567046, 27827278481, 27863989916, 27900701351, 27937412786, 27974124221, 28010835656, 28047547091, 28084258526, 28120969961, 28157681396, 28194392831, 28231104266, 28267815701, 28304527136, 28341238571, 28377950006, 28414661441, 28451372876, 28488084311, 28524795746, 28561507181, 28598218616, 28634930051, 28671641486, 28708352921, 28745064356, 28781775791, 28818487226, 28855198661, 28891910096, 28928621531, 28965332966, 29002044401, 29038755836, 29075467271, 29112178706, 29148890141, 29185601576, 29222313011, 29259024446, 29295735881, 29332447316, 29369158751, 29405870186, 29442581621, 29479293056, 29516004491, 29552715926, 29589427361, 29626138796, 29662850231, 29699561666, 29736273101, 29772984536, 29809695971, 29846407406, 29883118841, 29919830276, 29956541711, 29993253146, 30029964581, 30066676016, 30103387451, 30140098886, 30176810321, 30213521756, 30250233191, 30286944626, 30323656061, 30360367496, 30397078931, 30433790366, 30470501801, 30507213236, 30543924671, 30580636106, 30617347541, 30654058976, 30690770411, 30727481846, 30764193281, 30800904716, 30837616151, 30874327586, 30911039021, 30947750456, 30984461891, 31021173326, 31057884761, 31094596196, 31131307631, 31168019066, 31204730501, 31241441936, 31278153371, 31314864806, 31351576241, 31388287676, 31424999111, 31461710546, 31498421981, 31535133416, 31571844851, 31608556286, 31645267721, 31681979156, 31718690591, 31755402026, 31792113461, 31828824896, 31865536331, 31902247766, 31938959201, 31975670636, 32012382071, 32049093506, 32085804941, 32122516376, 32159227811, 32195939246, 32232650681, 32269362116, 32306073551, 32342784986, 32379496421, 32416207856, 32452919291, 32489630726, 32526342161, 32563053596, 32599765031, 32636476466, 32673187901, 32709899336, 32746610771, 32783322206, 32820033641, 32856745076, 32893456511, 32930167946, 32966879381, 33003590816, 33040302251, 33077013686, 33113725121, 33150436556, 33187147991, 33223859426, 33260570861, 33297282296, 33333993731, 33370705166, 33407416601, 33444128036, 33480839471, 33517550906, 33554262341, 33590973776, 33627685211, 33664396646, 33701108081, 33737819516, 33774530951, 33811242386, 33847953821, 33884665256, 33921376691, 33958088126, 33994799561, 34031510996, 34068222431, 34104933866, 34141645301, 34178356736, 34215068171, 34251779606, 34288491041, 34325202476, 34361913911, 34398625346, 34435336781, 34472048216, 34508759651, 34545471086, 34582182521, 34618893956, 34655605391, 34692316826, 34729028261, 34765739696, 34802451131, 34839162566, 34875874001, 34912585436, 34949296871, 34986008306, 35022719741, 35059431176, 35096142611, 35132854046, 35169565481, 35206276916, 35242988351, 35279699786, 35316411221, 35353122656, 35389834091, 35426545526, 35463256961, 35499968396, 35536679831, 35573391266, 35610102701, 35646814136, 35683525571, 35720237006, 35756948441, 35793659876, 35830371311, 35867082746, 35903794181, 35940505616, 35977217051, 36013928486, 36050639921, 36087351356, 36124062791, 36160774226, 36197485661, 36234197096, 36270908531, 36307619966, 36344331401, 36381042836, 36417754271, 36454465706, 36491177141, 36527888576, 36564600011, 36601311446, 36638022881, 36674734316, 36711445751, 36748157186, 36784868621, 36821580056, 36858291491, 36895002926, 36931714361, 36968425796, 37005137231, 37041848666, 37078560101, 37115271536, 37151982971, 37188694406, 37225405841, 37262117276, 37298828711, 37335540146, 37372251581, 37408963016, 37445674451, 37482385886, 37519097321, 37555808756, 37592520191);
my @roi_block_starts = (0, 1024);
my @roi_block_stops = (1023, 1024);
sub get_max_ROI_divisions{
        (my $assigned_block, my $num_ROI_divisions) = @_;
	my $total_ROI_iterations = $roi_block_stops[2*$assigned_block + 1] - $roi_block_starts[2*$assigned_block];
	if($num_ROI_divisions < $total_ROI_iterations){
		return $num_ROI_divisions;
	}
	return $total_ROI_iterations;
}

sub output_ROI_divisions_file{
    (my $current_directory, my $assigned_block, my $num_ROI_divisions, $simulation_suffix) = @_;

	my $total_ROI_iterations = $roi_block_stops[2*$assigned_block + 1] - $roi_block_starts[2*$assigned_block];
	if($num_ROI_divisions > $total_ROI_iterations){
		$num_ROI_divisions = $total_ROI_iterations;
	}

	my $dest_folder_parent = $current_directory . "/ROI_" . $assigned_block;
	my $command = "mkdir " . $dest_folder_parent;
	system($command);
	my @upper_rank_array;
	
	my $target_file = $current_directory . "/Roi_divisions.csv";
	open(my $target_filehandle, '>>', $target_file) or die "Failed to open results file: $target_file\n";
	my $rank = 0;
	my $roi_block_begin = $roi_block_starts[2*$assigned_block];
	my $output_string = "";
	
	while($rank < $num_ROI_divisions){
		my $lower_bound = $roi_block_begin + int($rank*($total_ROI_iterations)/$num_ROI_divisions);
		my $upper_bound = $roi_block_begin + int(($rank+1)*($total_ROI_iterations)/$num_ROI_divisions);
		if($upper_bound > $lower_bound){
			my $instr_start = $profiled_instruction_counts[$lower_bound];
			my $instr_length = $profiled_instruction_counts[$upper_bound] - $instr_start;
			$output_string .= $assigned_block . "," . $rank . "," . $instr_start . "," . $instr_length . "\n";
			push @upper_rank_array, $rank;
		}
		$rank += 1;
	}
	print $target_filehandle $output_string;
	close($target_filehandle);

	#output array into header file allowing back annotated code to recognize which indexes correspond with intervals in latency and energy
	my $index_header_file = $current_directory . "/target_files/ROI_INDEX_VALUES_" . $simulation_suffix . ".h";
	$output_string = "static int ROI_" . $assigned_block . "_size = " . scalar(@upper_rank_array) . ";\n";
	$output_string .= "static int ROI_" . $assigned_block . "_INDEXES[" . scalar(@upper_rank_array) . "] = {";
	open(my $index_filehandle, '>>', $index_header_file) or die "Failed to open results file: $index_header_file\n";
	if($new_num_ROI_divisions > 0){
		$output_string .= $upper_rank_array[0];
	}
	for(my $new_rank = 1; $new_rank < $new_num_ROI_divisions; $new_rank++){
		$output_string .= ", " . $upper_rank_array[$new_rank];
	}
	$output_string .= "};\n";
	print $index_filehandle $output_string;
	close($index_filehandle);
	
    return;
}

sub output_ROI_divisions_average_file{
        (my $current_directory, my $assigned_block, my $num_ROI_divisions, $simulation_suffix) = @_;

	my $total_ROI_iterations = $roi_block_stops[2*$assigned_block + 1] - $roi_block_starts[2*$assigned_block];
	if($num_ROI_divisions > $total_ROI_iterations){
		$num_ROI_divisions = $total_ROI_iterations;
	}
	my $average_instructions = ($profiled_instruction_counts[$roi_block_stops[2*$assigned_block + 1]] - $profiled_instruction_counts[$roi_block_starts[2*$assigned_block]])/$num_ROI_divisions;

	my $target_file = $current_directory . "/Roi_divisions.csv";
	open(my $target_filehandle, '>>', $target_file) or die "Failed to open results file: $target_file\n";
	my $rank = 0;
	my $roi_block_begin = $roi_block_starts[2*$assigned_block];
	my $output_string = "";
	my @divisions_array;
	my @upper_rank_array;
	
	while($rank < $num_ROI_divisions){
		my $lower_bound = $roi_block_begin + int($rank*($total_ROI_iterations)/$num_ROI_divisions);
		my $upper_bound = $roi_block_begin + int(($rank+1)*($total_ROI_iterations)/$num_ROI_divisions);
		my $instr_start = $profiled_instruction_counts[$lower_bound];
		my $instr_length = $profiled_instruction_counts[$upper_bound] - $instr_start;
		while ($instr_length<$average_instructions and $rank < $num_ROI_divisions){
			$rank += 1;
			$upper_bound = $roi_block_begin + int(($rank+1)*($total_ROI_iterations)/$num_ROI_divisions);
			$instr_length = $profiled_instruction_counts[$upper_bound] - $instr_start;
		}
		if($upper_bound > $lower_bound){
			push @divisions_array, [$instr_start, $instr_length];
			push @upper_rank_array, $rank;
		}
		$rank += 1;
	}
	my $new_num_ROI_divisions = scalar (@divisions_array);
	if($new_num_ROI_divisions > 1){
		if($divisions_array[$new_num_ROI_divisions-1][1] < $average_instructions){
			$divisions_array[$new_num_ROI_divisions-2][1] += $divisions_array[$new_num_ROI_divisions-1][1];
			pop @divisions_array;
			$upper_rank_array[$new_num_ROI_divisions-2] = $upper_rank_array[$new_num_ROI_divisions-1];
			pop @upper_rank_array;
			$new_num_ROI_divisions -= 1;
		}
	}

	my $dest_folder_parent = $current_directory . "/ROI_" . $assigned_block;
	my $command = "mkdir " . $dest_folder_parent;
	system($command);

	for(my $new_rank = 0; $new_rank < $new_num_ROI_divisions; $new_rank++){
		$output_string .= $assigned_block . "," . $new_rank . "," . $divisions_array[$new_rank][0] . "," . $divisions_array[$new_rank][1] . "\n";
		my $dest_folder = $dest_folder_parent . "/Division_" . $new_rank;
		$command = "mkdir " . $dest_folder;
		system($command);
	}

	print $target_filehandle $output_string;
	close($target_filehandle);
	
	#output array into header file allowing back annotated code to recognize which indexes correspond with intervals in latency and energy
	my $index_header_file = $current_directory . "/target_files/ROI_INDEX_VALUES_" . $simulation_suffix . ".h";
	$output_string = "static int ROI_" . $assigned_block . "_size = " . scalar(@upper_rank_array) . ";\n";
	$output_string .= "static int ROI_" . $assigned_block . "_INDEXES[" . scalar(@upper_rank_array) . "] = {";
	open(my $index_filehandle, '>>', $index_header_file) or die "Failed to open results file: $index_header_file\n";
	if($new_num_ROI_divisions > 0){
		$output_string .= $upper_rank_array[0];
	}
	for(my $new_rank = 1; $new_rank < $new_num_ROI_divisions; $new_rank++){
		$output_string .= ", " . $upper_rank_array[$new_rank];
	}
	$output_string .= "};\n";
	print $index_filehandle $output_string;
	close($index_filehandle);
	
	return;
}

sub output_ROI_divisions_min_file{
        (my $current_directory, my $assigned_block, $simulation_suffix) = @_;

	my $total_ROI_iterations = $roi_block_stops[2*$assigned_block + 1] - $roi_block_starts[2*$assigned_block];
	my $num_ROI_divisions = $total_ROI_iterations;
	my $minimum_instructions = 4000000;

	my $target_file = $current_directory . "/Roi_divisions.csv";
	open(my $target_filehandle, '>>', $target_file) or die "Failed to open results file: $target_file\n";
	my $rank = 0;
	my $roi_block_begin = $roi_block_starts[2*$assigned_block];
	my $output_string = "";
	my @divisions_array;
	my @upper_rank_array;
	
	while($rank < $num_ROI_divisions){
		my $lower_bound = $roi_block_begin + int($rank*($total_ROI_iterations)/$num_ROI_divisions);
		my $upper_bound = $roi_block_begin + int(($rank+1)*($total_ROI_iterations)/$num_ROI_divisions);
		my $instr_start = $profiled_instruction_counts[$lower_bound];
		my $instr_length = $profiled_instruction_counts[$upper_bound] - $instr_start;
		while ($instr_length<$minimum_instructions and $rank < $num_ROI_divisions){
			$upper_bound = $roi_block_begin + int(($rank+1)*($total_ROI_iterations)/$num_ROI_divisions);
			$instr_length = $profiled_instruction_counts[$upper_bound] - $instr_start;
			$rank += 1;
		}
		if($upper_bound > $lower_bound){
			$instr_length = $profiled_instruction_counts[$upper_bound] - $instr_start;
			push @divisions_array, [$instr_start, $instr_length];
			push @upper_rank_array, $rank;
		}
		$rank += 1;
	}
	my $new_num_ROI_divisions = scalar (@divisions_array);
	if($new_num_ROI_divisions > 1){
		if($divisions_array[$new_num_ROI_divisions-1][1] < $minimum_instructions){
			$divisions_array[$new_num_ROI_divisions-2][1] += $divisions_array[$new_num_ROI_divisions-1][1];
			pop @divisions_array;
			$upper_rank_array[$new_num_ROI_divisions-2] = $upper_rank_array[$new_num_ROI_divisions-1];
			pop @upper_rank_array;
			$new_num_ROI_divisions -= 1;
		}
	}

	my $dest_folder_parent = $current_directory . "/ROI_" . $assigned_block;
	my $command = "mkdir " . $dest_folder_parent;
	system($command);

	for(my $new_rank = 0; $new_rank < $new_num_ROI_divisions; $new_rank++){
		$output_string .= $assigned_block . "," . $new_rank . "," . $divisions_array[$new_rank][0] . "," . $divisions_array[$new_rank][1] . "\n";
		my $dest_folder = $dest_folder_parent . "/Division_" . $new_rank;
		$command = "mkdir " . $dest_folder;
		system($command);
	}

	print $target_filehandle $output_string;
	close($target_filehandle);

	#output array into header file allowing back annotated code to recognize which indexes correspond with intervals in latency and energy
	my $index_header_file = $current_directory . "/target_files/ROI_INDEX_VALUES_" . $simulation_suffix . ".h";
	$output_string = "static int ROI_" . $assigned_block . "_size = " . scalar(@upper_rank_array) . ";\n";
	$output_string .= "static int ROI_" . $assigned_block . "_INDEXES[" . scalar(@upper_rank_array) . "] = {";
	open(my $index_filehandle, '>>', $index_header_file) or die "Failed to open results file: $index_header_file\n";
	if($new_num_ROI_divisions > 0){
		$output_string .= $upper_rank_array[0];
	}
	for(my $new_rank = 1; $new_rank < $new_num_ROI_divisions; $new_rank++){
		$output_string .= ", " . $upper_rank_array[$new_rank];
	}
	$output_string .= "};\n";
	print $index_filehandle $output_string;
	close($index_filehandle);
	
    return;
}

1;
